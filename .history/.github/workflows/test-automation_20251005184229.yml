name: Test Automation Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  # schedule:
  #   # Run tests daily at 2 AM UTC
  #   - cron: '0 2 * * *'

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx2048m'

jobs:
  # Job 1: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run unit tests
      run: mvn test -Dtest=*Test -DfailIfNoTests=false
      
    - name: Upload unit test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: target/surefire-reports/

  # Job 2: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      prometheus:
        image: prom/prometheus:v2.53.0
        ports:
          - 9090:9090
        options: --health-cmd="curl -f http://localhost:9090/-/healthy" --health-interval=30s --health-timeout=10s --health-retries=3
        
      grafana:
        image: grafana/grafana:11.1.0
        ports:
          - 3000:3000
        env:
          GF_SECURITY_ADMIN_USER: admin
          GF_SECURITY_ADMIN_PASSWORD: admin
        options: --health-cmd="curl -f http://localhost:3000/api/health" --health-interval=30s --health-timeout=10s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Start application
      run: |
        mvn spring-boot:run &
        sleep 30
        curl -f http://localhost:8080/actuator/health || exit 1
        
    - name: Run integration tests
      run: mvn test -Dtest=*IntegrationTest -DfailIfNoTests=false
      
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: target/surefire-reports/

  # Job 3: Regression Tests
  regression-tests:
    name: Regression Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Start application
      run: |
        mvn spring-boot:run &
        sleep 30
        curl -f http://localhost:8080/actuator/health || exit 1
        
    - name: Run regression tests
      run: |
        mvn test-compile
        java -cp "target/classes:target/test-classes:$(mvn dependency:build-classpath -q -Dmdep.outputFile=/dev/stdout)" \
             com.srviswan.basketpricing.testing.RegressionTestSuite
      
    - name: Upload regression test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: regression-test-results
        path: test-report.*

  # Job 4: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: regression-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Start application
      run: |
        mvn spring-boot:run &
        sleep 30
        curl -f http://localhost:8080/actuator/health || exit 1
        
    - name: Run performance tests
      run: |
        mvn test-compile
        java -cp "target/classes:target/test-classes:$(mvn dependency:build-classpath -q -Dmdep.outputFile=/dev/stdout)" \
             com.srviswan.basketpricing.testing.PerformanceTestSuite
      
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: test-report.*

  # Job 5: Load Tests
  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    needs: performance-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Start application
      run: |
        mvn spring-boot:run &
        sleep 30
        curl -f http://localhost:8080/actuator/health || exit 1
        
    - name: Run load tests
      run: |
        mvn test-compile
        java -cp "target/classes:target/test-classes:$(mvn dependency:build-classpath -q -Dmdep.outputFile=/dev/stdout)" \
             com.srviswan.basketpricing.testing.LoadTestSuite
      
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: load-test-results
        path: test-report.*

  # Job 6: Stress Tests
  stress-tests:
    name: Stress Tests
    runs-on: ubuntu-latest
    needs: load-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Start application
      run: |
        mvn spring-boot:run &
        sleep 30
        curl -f http://localhost:8080/actuator/health || exit 1
        
    - name: Run stress tests
      run: |
        mvn test-compile
        java -cp "target/classes:target/test-classes:$(mvn dependency:build-classpath -q -Dmdep.outputFile=/dev/stdout)" \
             com.srviswan.basketpricing.testing.StressTestSuite
      
    - name: Upload stress test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: stress-test-results
        path: test-report.*

  # Job 7: Test Automation Suite
  test-automation:
    name: Test Automation Suite
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, regression-tests, performance-tests, load-tests, stress-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Start application
      run: |
        mvn spring-boot:run &
        sleep 30
        curl -f http://localhost:8080/actuator/health || exit 1
        
    - name: Run test automation suite
      run: |
        mvn test-compile
        java -cp "target/classes:target/test-classes:$(mvn dependency:build-classpath -q -Dmdep.outputFile=/dev/stdout)" \
             com.srviswan.basketpricing.testing.TestAutomationSuite
      
    - name: Upload test automation results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-automation-results
        path: test-report.*
        
    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: |
          test-report.html
          test-report.json
          test-report.xml
          test-report.csv

  # Job 8: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: test-automation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run security scan
      run: mvn org.owasp:dependency-check-maven:check
      
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: target/dependency-check-report.html

  # Job 9: Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: security-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run code quality checks
      run: |
        mvn spotbugs:check
        mvn checkstyle:check
        mvn pmd:check
        
    - name: Upload code quality results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-results
        path: |
          target/spotbugsXml.xml
          target/checkstyle-result.xml
          target/pmd.xml

  # Job 10: Build and Package
  build-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build application
      run: mvn clean package -DskipTests
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: target/*.jar

  # Job 11: Docker Build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build-package
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t basket-pricing-service:latest .
        docker tag basket-pricing-service:latest basket-pricing-service:${{ github.sha }}
        
    - name: Test Docker image
      run: |
        docker run -d -p 8080:8080 --name test-container basket-pricing-service:latest
        sleep 30
        curl -f http://localhost:8080/actuator/health || exit 1
        docker stop test-container
        docker rm test-container
        
    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: |
          basket-pricing-service:latest
          basket-pricing-service:${{ github.sha }}

  # Job 12: Deployment Tests
  deployment-tests:
    name: Deployment Tests
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Start services with Docker Compose
      run: |
        docker-compose up -d
        sleep 60
        curl -f http://localhost:8080/actuator/health || exit 1
        
    - name: Run deployment tests
      run: |
        # Test service health
        curl -f http://localhost:8080/actuator/health
        
        # Test API endpoints
        curl -f http://localhost:8080/api/prices?symbols=IBM.N
        
        # Test Prometheus metrics
        curl -f http://localhost:9090/api/v1/query?query=up
        
        # Test Grafana
        curl -f http://localhost:3000/api/health
        
    - name: Stop services
      if: always()
      run: docker-compose down
      
    - name: Upload deployment test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: deployment-test-results
        path: docker-compose.log

  # Job 13: Notification
  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test-automation, deployment-tests]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test-automation.result == 'success' && needs.deployment-tests.result == 'success' }}
      run: |
        echo "All tests passed successfully!"
        # Add notification logic here (Slack, email, etc.)
        
    - name: Notify on failure
      if: ${{ needs.test-automation.result == 'failure' || needs.deployment-tests.result == 'failure' }}
      run: |
        echo "Some tests failed!"
        # Add notification logic here (Slack, email, etc.)
