version: '3.8'

services:
  # Main basket pricing service
  basket-pricing-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: basket-pricing-service
    ports:
      - "8080:8080"   # REST API
      - "9090:9090"   # gRPC
      - "8081:8081"   # Actuator/Management
    environment:
      # Spring profiles
      - SPRING_PROFILES_ACTIVE=docker
      
      # Application settings
      - SERVER_PORT=8080
      - MANAGEMENT_SERVER_PORT=8081
      - GRPC_SERVER_PORT=9090
      
      # Refinitiv configuration (override with your credentials)
      - REFINITIV_HOST=${REFINITIV_HOST:-ads1}
      - REFINITIV_PORT=${REFINITIV_PORT:-14002}
      - REFINITIV_SERVICE_NAME=${REFINITIV_SERVICE_NAME:-ELEKTRON_DD}
      - REFINITIV_USERNAME=${REFINITIV_USERNAME:-user1}
      
      # Redis configuration
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      
      # Kafka configuration
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      
      # Logging
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_COM_SRVISWAN=DEBUG
      
      # JVM options
      - JAVA_OPTS=-Xmx2g -Xms1g
      
    volumes:
      # Mount config directory for easy configuration updates
      - ./config:/app/config:ro
      # Mount logs directory
      - ./logs:/app/logs
      
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    
    networks:
      - basket-pricing-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: basket-pricing-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - basket-pricing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: basket-pricing-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - basket-pricing-network
    restart: unless-stopped

  # Kafka for event streaming
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: basket-pricing-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - basket-pricing-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: basket-pricing-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - basket-pricing-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: basket-pricing-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - basket-pricing-network
    restart: unless-stopped

networks:
  basket-pricing-network:
    driver: bridge

volumes:
  redis-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  prometheus-data:
  grafana-data:
